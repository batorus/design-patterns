The objects participating in this pattern are:

    1. Component
        declares the interface for objects in the composition.
        implements default behavior for the interface common to all classes, as appropriate.
        declares an interface for accessing and managing its child components.
    2. Leaf
        represents leaf objects in the composition. A leaf has no children.
        defines behavior for primitive objects in the composition.
    3. Composite
        defines behavior for components having children.
        stores child components.
        implements child-related operations in the Component interface.
    4. Client
        manipulates objects in the composition through the Component interface.

        Sample problem to solve

    Let’s suppose we are building a financial application. We have customers with multiple bank accounts.
    We are asked to prepare a design which can be useful to generate the customer’s consolidated
    account view which is able to show customer’s total account balance as well as consolidated account
    statement after merging all the account statements. So, application should be able to generate:

    1) Customer’s total account balance from all accounts
    2) Consolidated account statement

    Composite Pattern consists of following objects.

        Base Component – Base component is the interface for all objects in the composition, client program uses base component to work with the objects in the composition. It can be an interface or an abstract class with some methods common to all the objects.
        Leaf – Defines the behaviour for the elements in the composition. It is the building block for the composition and implements base component. It doesn’t have references to other Components.
        Composite – It consists of leaf elements and implements the operations in base component.